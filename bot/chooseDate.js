import { Telegraf, Markup, Scenes } from "telegraf";

import start from "./start.js";

import Room from "../modules/rooms.js";
import Booking from "../modules/booking.js";
import Confirm from "../modules/confirmBooking.js";
import {
  parseDate,
  validateFullName,
  validatePhone,
  getRemainingRooms,
  // handleRoomSelection,
} from "./utils.js";

import { roomDescriptions } from "./constants.js";

const pickDate = new Scenes.BaseScene("pickDate");
pickDate.enter(async (ctx) => {
  ctx.session.data = {};
  await ctx.reply("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ: –î–î:–ú–ú:–†–†–†–†");
});

pickDate.on("text", async (ctx) => {
  ctx.session.data.date = ctx.message.text.trim();
  return ctx.scene.enter("messenger");
});

const messenger = new Scenes.BaseScene("messenger");

messenger.enter(async (ctx) => {
  await ctx.reply(
    "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –Ω–æ–º–µ—Ä—É:",
    Markup.inlineKeyboard([
      [Markup.button.callback("–ï–∫–æ–Ω–æ–º", "–ï–∫–æ–Ω–æ–º")],
      [Markup.button.callback("–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–°—Ç–∞–Ω–¥–∞—Ä—Ç")],
      [Markup.button.callback("–ù–∞–ø—ñ–≤–ª—é–∫—Å", "–ù–∞–ø—ñ–≤–ª—é–∫—Å")],
      [Markup.button.callback("–õ—é–∫—Å", "–õ—é–∫—Å")],
    ])
  );
});

// async function handleRoomAction(ctx, classRoom) {
//   const count = await Booking.countDocuments({
//     classRoom,
//     date: ctx.session.data.date,
//   });

//   const total_rooms = await Room.countDocuments({ classRoom });

//   const available = total_rooms - count;

//   if (available <= 0) {
//     await ctx.reply(
//       "–ù–∞ –∂–∞–ª—å, –Ω–∞ –æ–±—Ä–∞–Ω—É –≤–∞–º–∏ –¥–∞—Ç—É –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ø–∏—Å–∫—É —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö"
//     );
//     return ctx.scene.enter("pickDate");
//   }

//   const room = await Room.findOne({ classRoom });

//   if (!room || !room.image) {
//     await ctx.reply("Room not found");
//     return;
//   }

//   for (const image of room.image) {
//     await ctx.replyWithPhoto({ source: image });
//   }

//   await ctx.replyWithHTML(roomDescriptions[classRoom]);
//   ctx.session.data.classRoom = classRoom;

//   await ctx.reply(
//     "–í–∏–±–µ—Ä—ñ—Ç—å –ë—Ä–æ–Ω—é–≤–∞—Ç–∏ —á–∏ –≤–µ—Ä–Ω—É—Ç–∏—Å—å",
//     Markup.keyboard([["–ë—Ä–æ–Ω—é–≤–∞—Ç–∏", "–ù–∞–∑–∞–¥"]])
//       .oneTime()
//       .resize()
//   );

//   return ctx.scene.enter("backOrQuantityNight");
// }

["–ï–∫–æ–Ω–æ–º", "–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–ù–∞–ø—ñ–≤–ª—é–∫—Å", "–õ—é–∫—Å"].forEach((classRoom) => {
  messenger.action(classRoom, async (ctx) => {
    await ctx.answerCbQuery();
    return handleRoomSelection(ctx, classRoom, roomDescriptions[classRoom]);
  });
});

const backOrQuantityNight = new Scenes.BaseScene("backOrQuantityNight");

backOrQuantityNight.hears("–ë—Ä–æ–Ω—é–≤–∞—Ç–∏", async (ctx) => {
  await ctx.reply(
    "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ—á–µ–π, —è–∫—ñ –±–∞–∂–∞—î—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤ –Ω–∞—à–æ–º—É –≥–æ—Ç–µ–ª—ñ"
  );
  return ctx.scene.enter("howManyNight");
});

backOrQuantityNight.hears("–ù–∞–∑–∞–¥", async (ctx) => {
  return ctx.scene.enter("pickDate");
});

const howManyNight = new Scenes.BaseScene("howManyNight");

howManyNight.on("text", async (ctx) => {
  const nights = parseInt(ctx.message.text);
  if (isNaN(nights) || nights <= 0 || nights > 30) {
    await ctx.reply("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ—á–µ–π (–≤—ñ–¥ 1 –¥–æ 30).");
    return;
  }
  ctx.session.data.night = nights;
  return ctx.scene.enter("fullName");
});

const fullName = new Scenes.BaseScene("fullName");

fullName.enter(async (ctx) => {
  await ctx.reply("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –ü–Ü–ë –∑–∞ –∑—Ä–∞–∑–∫–æ–º ‚Äî –ö–æ–º–∞—Ä–æ–≤ –í–∞—Å–∏–ª—ñ–π –î–º–∏—Ç—Ä–æ–≤–∏—á");
});

fullName.on("text", async (ctx) => {
  const input = ctx.message.text.trim();

  if (!validateFullName(input)) {
    await ctx.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ü–Ü–ë. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    return;
  }

  ctx.session.data.fullName = input;
  return ctx.scene.enter("phone");
});

const phone = new Scenes.BaseScene("phone");

phone.enter(async (ctx) => {
  await ctx.reply("üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX");
});

phone.on("text", async (ctx) => {
  const input = ctx.message.text.trim();

  if (!validatePhone(input)) {
    await ctx.reply(
      "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: +380937465892. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
    );
    return;
  }

  const formatted = input.replace(
    /(\+380)(\d{2})(\d{3})(\d{2})(\d{2})/,
    "$1($2)-$3-$4-$5"
  );

  ctx.session.data.phoneNumber = formatted;
  return ctx.scene.enter("checkData");
});

const checkData = new Scenes.BaseScene("checkData");

checkData.enter(async (ctx) => {
  const { date, classRoom, fullName, phoneNumber, night } = ctx.session.data;
  const room = await Room.findOne({ classRoom });
  const price = room.price * night;

  await ctx.replyWithHTML(
    `<b>üìÖ –î–∞—Ç–∞:</b> ${date}
<b>üè® –ù–æ–º–µ—Ä:</b> ${classRoom}
<b>üë§ –ü–Ü–ë:</b> ${fullName}
<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneNumber}
<b>üõè –ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ—á–µ–π:</b> ${night}
<b>üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞:</b> ${price} –≥—Ä–Ω`
  );

  await ctx.reply(
    "–í—Å–µ –≤—ñ—Ä–Ω–æ?",
    Markup.inlineKeyboard([
      [Markup.button.callback("–¢–∞–∫", "–¢–∞–∫")],
      [Markup.button.callback("–ù—ñ", "–ù—ñ")],
    ])
  );

  return ctx.scene.enter("details");
});

const details = new Scenes.BaseScene("details");

details.action("–¢–∞–∫", async (ctx) => {
  await ctx.replyWithHTML(
    `<b>–ù–∞—à—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è —Å–ø–ª–∞—Ç–∏:</b>
–û—Ç—Ä–∏–º—É–≤–∞—á –∫–æ—à—Ç—ñ–≤: ‚Äú–ß–µ—Ä–Ω—ñ–≤—Ü—ñ‚Äù
–ö–æ–¥ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: 45861336
–ë–∞–Ω–∫: –ö–µ–Ω–¥—ñ–ë–∞–Ω–∫
–†–∞—Ö—É–Ω–æ–∫: UA2541323652000121456321457895`,
    Markup.keyboard([["–°–ø–ª–∞—á–µ–Ω–æ"], ["–ù–∞–∑–∞–¥"]])
      .oneTime()
      .resize()
  );
  return ctx.scene.enter("paid");
});

details.action("–ù—ñ", async (ctx) => {
  return ctx.scene.enter("pickDate");
});

const paid = new Scenes.BaseScene("paid");

paid.hears("–°–ø–ª–∞—á–µ–Ω–æ", async (ctx) => {
  const user = ctx.update.message.from;
  const { date, night, classRoom, phoneNumber, fullName } = ctx.session.data;
  const userId = user.id;
  const userName = user.username;

  const parsedDate = parseDate(date);
  if (!parsedDate) {
    await ctx.reply("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    return ctx.scene.enter("pickDate");
  }

  const nightCount = parseInt(night, 10);
  parsedDate.setDate(parsedDate.getDate() + nightCount);
  const days = String(parsedDate.getDate()).padStart(2, "0");
  const months = String(parsedDate.getMonth() + 1).padStart(2, "0");
  const years = parsedDate.getFullYear();
  const beforeDate = `${days}:${months}:${years}`;

  const now = new Date();
  const hours = now.getHours();
  const minutes = String(now.getMinutes()).padStart(2, "0");
  const time = `${hours}:${minutes}`;

  const room = await Room.findOne({ classRoom });
  const price = room.price * nightCount;

  const newBooking = new Booking({
    userName,
    userId,
    date,
    time,
    beforeDate,
    classRoom,
    night,
    price,
    phoneNumber,
    fullName,
  });

  try {
    await newBooking.save();
    console.log("‚úÖ Booking saved");
  } catch (err) {
    console.error("‚ùå DB save error:", err);
    await ctx.reply("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.");
    return;
  }

  await ctx.reply(
    "‚úÖ –ß–µ–∫–∞–π—Ç–µ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–∑ –Ω–æ–º–µ—Ä–æ–º –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–º."
  );

  return start(ctx);
});

paid.hears("–ù–∞–∑–∞–¥", async (ctx) => {
  return ctx.scene.enter("checkData");
});

export {
  pickDate,
  messenger,
  backOrQuantityNight,
  howManyNight,
  fullName,
  phone,
  checkData,
  details,
  paid,
};
