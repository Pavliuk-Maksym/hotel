import { Telegraf, Markup, Scenes } from "telegraf";

import start from "./start.js";

import Room from "../modules/rooms.js";
import Booking from "../modules/booking.js";
import Confirm from "../modules/confirmBooking.js";

const pickDate = new Scenes.BaseScene("pickDate");
pickDate.enter(async (ctx) => {
  ctx.session.data = {};
  await ctx.reply("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ: –î–î:–ú–ú:–†–†–†–†");
});

pickDate.on("text", async (ctx) => {
  ctx.session.data.date = ctx.message.text.trim();
  return ctx.scene.enter("checkDate");
});

const checkDate = new Scenes.BaseScene("checkDate");
checkDate.enter(async (ctx) => {
  const inputDate = ctx.session.data.date;
  const today = new Date();

  const regex = /^(\d{2}):(\d{2}):(\d{4})$/;
  if (!regex.test(inputDate)) {
    await ctx.reply("–ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏");
    return ctx.scene.enter("pickDate");
  }

  const [day, month, year] = inputDate.split(":").map(Number);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
  if (day < 1 || day > 31 || month < 1 || month > 12) {
    await ctx.reply("–ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏");
    return ctx.scene.enter("pickDate");
  }

  const inputDateObj = new Date(year, month - 1, day);
  const maxDate = new Date(2025, 11, 31);
  const todayDateOnly = new Date(
    today.getFullYear(),
    today.getMonth(),
    today.getDate()
  );

  if (inputDateObj > maxDate) {
    await ctx.reply("–ü–æ–º–∏–ª–∫–∞: –î–∞—Ç–∞ –º–∞—î –±—É—Ç–∏ –¥–æ 31 –≥—Ä—É–¥–Ω—è 2025 —Ä–æ–∫—É");
    return ctx.scene.enter("pickDate");
  }

  if (inputDateObj < todayDateOnly) {
    await ctx.reply("–ü–æ–º–∏–ª–∫–∞: –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–æ—é –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é");
    return ctx.scene.enter("pickDate");
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–æ —Ç–∏–ø—É
  const getRemainingRooms = async (classRoom) => {
    const targetDate = inputDateObj;

    const filterValidDates = (items) =>
      items.filter(({ beforeDate }) => {
        const [d, m, y] = beforeDate.split(":").map(Number);
        const dateObj = new Date(y, m - 1, d);
        return dateObj > targetDate;
      }).length;

    const [booking, confirm, room] = await Promise.all([
      Booking.find({ classRoom }),
      Confirm.find({ classRoom }),
      Room.findOne({ classRoom }),
    ]);

    const countBooking = filterValidDates(booking);
    const countConfirm = filterValidDates(confirm);

    const remaining = room.quantity - countBooking - countConfirm;
    return Math.max(remaining, 0);
  };

  const roomTypes = ["–ï–∫–æ–Ω–æ–º", "–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–ù–∞–ø—ñ–≤–ª—é–∫—Å", "–õ—é–∫—Å"];
  const availability = await Promise.all(
    roomTypes.map((type) => getRemainingRooms(type))
  );

  const buttons = roomTypes.map((type, idx) => [
    Markup.button.callback(`${type} ${availability[idx]}`, type),
  ]);

  await ctx.reply(
    "–ù–∞ —Ü—é –¥–∞—Ç—É –≤—ñ–ª—å–Ω—ñ —Ç–∞–∫—ñ –Ω–æ–º–µ—Ä–∏",
    Markup.inlineKeyboard(buttons)
  );

  return ctx.scene.enter("messenger");
});

const messenger = new Scenes.BaseScene("messenger");

const roomDescriptions = {
  –ï–∫–æ–Ω–æ–º: `<b>–î–≤–æ–∫—ñ–º–Ω–∞—Ç–Ω–∏–π –¥–≤–æ–º—ñ—Å–Ω–∏–π –µ–∫–æ–Ω–æ–º</b>
–ü—Ä–æ—Å—Ç–æ—Ä–∏–π –¥–≤–æ–∫—ñ–º–Ω–∞—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Å–µ—Ä–µ–¥–Ω—å–æ—é –ø–ª–æ—â–µ—é 40 –º¬≤. –°–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –≤—ñ—Ç–∞–ª—å–Ω—ñ, —Å–ø–∞–ª—å–Ω—ñ —Ç–∞ –≤–∞–Ω–Ω–æ—ó –∫—ñ–º–Ω–∞—Ç–∏. –£ —Å–ø–∞–ª—å–Ω—ñ ‚Äì –æ–¥–Ω–µ –¥–≤–æ—Å–ø–∞–ª—å–Ω–µ –ª—ñ–∂–∫–æ, —É –≤—ñ—Ç–∞–ª—å–Ω—ñ ‚Äì —Ä–æ–∑–∫–ª–∞–¥–Ω–∏–π –¥–∏–≤–∞–Ω. –ù–∞ –≤–∏–º–æ–≥—É –Ω–∞–¥–∞—î—Ç—å—Å—è –¥–∏—Ç—è—á–µ –ª—ñ–∂–µ—á–∫–æ.
–¶—ñ–Ω–∞: 1250 –≥—Ä–Ω`,

  –°—Ç–∞–Ω–¥–∞—Ä—Ç: `<b>–î–≤–æ–∫—ñ–º–Ω–∞—Ç–Ω–∏–π –¥–≤–æ–º—ñ—Å–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç</b>
–ü—Ä–æ—Å—Ç–æ—Ä–∏–π –¥–≤–æ–∫—ñ–º–Ω–∞—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Å–µ—Ä–µ–¥–Ω—å–æ—é –ø–ª–æ—â–µ—é 40 –º¬≤. –°–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –≤—ñ—Ç–∞–ª—å–Ω—ñ, —Å–ø–∞–ª—å–Ω—ñ —Ç–∞ –≤–∞–Ω–Ω–æ—ó –∫—ñ–º–Ω–∞—Ç–∏. –£ —Å–ø–∞–ª—å–Ω—ñ ‚Äì –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–µ –ª—ñ–∂–∫–æ king-size, —É –≤—ñ—Ç–∞–ª—å–Ω—ñ ‚Äì —Ä–æ–∑–∫–ª–∞–¥–Ω–∏–π –¥–∏–≤–∞–Ω. –ù–∞ –≤–∏–º–æ–≥—É –Ω–∞–¥–∞—î—Ç—å—Å—è –¥–∏—Ç—è—á–µ –ª—ñ–∂–µ—á–∫–æ.
–¶—ñ–Ω–∞: 1450 –≥—Ä–Ω`,

  –ù–∞–ø—ñ–≤–ª—é–∫—Å: `<b>–û–¥–Ω–æ–∫—ñ–º–Ω–∞—Ç–Ω–∏–π –æ–¥–Ω–æ–º—ñ—Å–Ω–∏–π –Ω–∞–ø—ñ–≤–ª—é–∫—Å</b>
–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –æ–¥–Ω–æ–∫—ñ–º–Ω–∞—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Å–µ—Ä–µ–¥–Ω—å–æ—é –ø–ª–æ—â–µ—é 19 –º¬≤. –Ü–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –¥—ñ–ª–æ–≤–∏—Ö –ª—é–¥–µ–π, –∫–æ—Ç—Ä—ñ –ø–æ–¥–æ—Ä–æ–∂—É—é—Ç—å –∑ –∫–æ–º—Ñ–æ—Ä—Ç–æ–º. –í –Ω–æ–º–µ—Ä—ñ –æ–¥–Ω–µ –ø–æ–ª—É—Ç–æ—Ä–Ω–µ –ª—ñ–∂–∫–æ.
–¶—ñ–Ω–∞: 1700 –≥—Ä–Ω`,

  –õ—é–∫—Å: `<b>–î–≤–æ–º—ñ—Å–Ω–∏–π –ª—é–∫—Å ¬´–ö–ª–∞—Å—ñ–∫¬ª</b>
–†–æ–∑–∫—ñ—à–Ω–∏–π –¥–≤–æ–∫—ñ–º–Ω–∞—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∞–±–æ –Ω–æ–º–µ—Ä-—Å—Ç—É–¥—ñ—è —Å–µ—Ä–µ–¥–Ω—å–æ—é –ø–ª–æ—â–µ—é 60 –º¬≤. –°–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑—ñ —Å–ø–∞–ª—å–Ω—ñ, –≤—ñ—Ç–∞–ª—å–Ω—ñ —Ç–∞ –≤–∞–Ω–Ω–æ—ó –∫—ñ–º–Ω–∞—Ç–∏. –£ —Å–ø–∞–ª—å–Ω—ñ ‚Äì –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–µ –ª—ñ–∂–∫–æ king-size, —É –≤—ñ—Ç–∞–ª—å–Ω—ñ ‚Äì —Ä–æ–∑–∫–ª–∞–¥–Ω–∏–π –¥–∏–≤–∞–Ω. –ù–∞ –≤–∏–º–æ–≥—É –Ω–∞–¥–∞—î—Ç—å—Å—è –¥–∏—Ç—è—á–µ –ª—ñ–∂–µ—á–∫–æ. –ù–æ–º–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –Ω–∞–π–±—ñ–ª—å—à –≤–∏–±–∞–≥–ª–∏–≤–∏—Ö –≥–æ—Å—Ç–µ–π.
–¶—ñ–Ω–∞: 2700 –≥—Ä–Ω`,
};

const TOTAL_ROOMS = 5;

async function handleRoomAction(ctx, classRoom) {
  // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö –±—Ä–æ–Ω–µ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
  const count = await Booking.countDocuments({
    classRoom,
    date: ctx.session.data.date,
  });

  const available = TOTAL_ROOMS - count;

  if (available <= 0) {
    await ctx.reply(
      "–ù–∞ –∂–∞–ª—å, –Ω–∞ –æ–±—Ä–∞–Ω—É –≤–∞–º–∏ –¥–∞—Ç—É –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ø–∏—Å–∫—É —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö"
    );
    return ctx.scene.enter("checkDate");
  }

  const room = await Room.findOne({ classRoom });

  if (!room || !room.image) {
    await ctx.reply("Room not found");
    return;
  }

  for (const image of room.image) {
    await ctx.replyWithPhoto({ source: image });
  }

  await ctx.replyWithHTML(roomDescriptions[classRoom]);
  ctx.session.data.classRoom = classRoom;

  await ctx.reply(
    "–í–∏–±–µ—Ä—ñ—Ç—å –ë—Ä–æ–Ω—é–≤–∞—Ç–∏ —á–∏ –≤–µ—Ä–Ω—É—Ç–∏—Å—å",
    Markup.keyboard([["–ë—Ä–æ–Ω—é–≤–∞—Ç–∏", "–ù–∞–∑–∞–¥"]])
      .oneTime()
      .resize()
  );

  return ctx.scene.enter("backOrQuantityNight");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
["–ï–∫–æ–Ω–æ–º", "–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–ù–∞–ø—ñ–≤–ª—é–∫—Å", "–õ—é–∫—Å"].forEach((classRoom) => {
  messenger.action(classRoom, (ctx) => handleRoomAction(ctx, classRoom));
});

const backOrQuantityNight = new Scenes.BaseScene("backOrQuantityNight");

backOrQuantityNight.hears("–ë—Ä–æ–Ω—é–≤–∞—Ç–∏", async (ctx) => {
  await ctx.reply(
    "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ—á–µ–π, —è–∫—ñ –±–∞–∂–∞—î—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤ –Ω–∞—à–æ–º—É –≥–æ—Ç–µ–ª—ñ"
  );
  return ctx.scene.enter("howManyNight");
});

backOrQuantityNight.hears("–ù–∞–∑–∞–¥", async (ctx) => {
  return ctx.scene.enter("checkDate");
});

const howManyNight = new Scenes.BaseScene("howManyNight");

howManyNight.on("text", async (ctx) => {
  const nights = parseInt(ctx.message.text);
  if (isNaN(nights) || nights <= 0 || nights > 30) {
    await ctx.reply("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ—á–µ–π (–≤—ñ–¥ 1 –¥–æ 30).");
    return;
  }
  ctx.session.data.night = nights;
  return ctx.scene.enter("fullName");
});

const fullName = new Scenes.BaseScene("fullName");

fullName.enter(async (ctx) => {
  await ctx.reply("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –ü–Ü–ë –∑–∞ –∑—Ä–∞–∑–∫–æ–º ‚Äî –ö–æ–º–∞—Ä–æ–≤ –í–∞—Å–∏–ª—ñ–π –î–º–∏—Ç—Ä–æ–≤–∏—á");
});

fullName.on("text", async (ctx) => {
  const input = ctx.message.text.trim();
  const regex = /^([a-zA-Z–∞-—è–ê-–Ø—ë–Å—ñ–Ü—ó–á—î–Ñ']+(\s|$)){2}[a-zA-Z–∞-—è–ê-–Ø—ë–Å—ñ–Ü—ó–á—î–Ñ']+$/;

  if (!regex.test(input)) {
    await ctx.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ü–Ü–ë. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    return;
  }

  ctx.session.data.fullName = input;
  return ctx.scene.enter("phone");
});

const phone = new Scenes.BaseScene("phone");

phone.enter(async (ctx) => {
  await ctx.reply("üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX");
});

phone.on("text", async (ctx) => {
  const input = ctx.message.text.trim();
  const regex = /^\+380\d{9}$/;

  if (!regex.test(input)) {
    await ctx.reply(
      "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: +380937465892. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
    );
    return;
  }

  const formatted = input.replace(
    /(\+380)(\d{2})(\d{3})(\d{2})(\d{2})/,
    "$1($2)-$3-$4-$5"
  );
  ctx.session.data.phoneNumber = formatted;

  return ctx.scene.enter("checkData");
});

const checkData = new Scenes.BaseScene("checkData");

checkData.enter(async (ctx) => {
  const { date, classRoom, fullName, phoneNumber, night } = ctx.session.data;
  const room = await Room.findOne({ classRoom });
  const price = room.price * night;

  await ctx.replyWithHTML(
    `<b>üìÖ –î–∞—Ç–∞:</b> ${date}
<b>üè® –ù–æ–º–µ—Ä:</b> ${classRoom}
<b>üë§ –ü–Ü–ë:</b> ${fullName}
<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneNumber}
<b>üõè –ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ—á–µ–π:</b> ${night}
<b>üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞:</b> ${price} –≥—Ä–Ω`
  );

  await ctx.reply(
    "–í—Å–µ –≤—ñ—Ä–Ω–æ?",
    Markup.inlineKeyboard([
      [Markup.button.callback("–¢–∞–∫", "–¢–∞–∫")],
      [Markup.button.callback("–ù—ñ", "–ù—ñ")],
    ])
  );

  return ctx.scene.enter("details");
});

const details = new Scenes.BaseScene("details");

details.action("–¢–∞–∫", async (ctx) => {
  await ctx.replyWithHTML(
    `<b>–ù–∞—à—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è —Å–ø–ª–∞—Ç–∏:</b>
–û—Ç—Ä–∏–º—É–≤–∞—á –∫–æ—à—Ç—ñ–≤: ‚Äú–ß–µ—Ä–Ω—ñ–≤—Ü—ñ‚Äù
–ö–æ–¥ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: 45861336
–ë–∞–Ω–∫: –ö–µ–Ω–¥—ñ–ë–∞–Ω–∫
–†–∞—Ö—É–Ω–æ–∫: UA2541323652000121456321457895`,
    Markup.keyboard([["–°–ø–ª–∞—á–µ–Ω–æ"], ["–ù–∞–∑–∞–¥"]])
      .oneTime()
      .resize()
  );
  return ctx.scene.enter("paid");
});

details.action("–ù—ñ", async (ctx) => {
  return ctx.scene.enter("checkDate");
});

const paid = new Scenes.BaseScene("paid");

paid.hears("–°–ø–ª–∞—á–µ–Ω–æ", async (ctx) => {
  const { date, night, classRoom, fullName, phoneNumber } = ctx.session.data;
  const user = ctx.update.message.from;
  const userId = user.id;
  const userName = user.username || "unknown";

  const room = await Room.findOne({ classRoom });
  if (!room) {
    await ctx.reply("–ü–æ–º–∏–ª–∫–∞: –Ω–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.");
    return ctx.scene.enter("checkDate");
  }

  // –î–∞—Ç–∞ –≤–∏—ó–∑–¥—É
  const [day, month, year] = date.split(":").map(Number);
  const checkIn = new Date(year, month - 1, day);
  const checkOut = new Date(checkIn);
  checkOut.setDate(checkOut.getDate() + parseInt(night));

  const beforeDate = `${String(checkOut.getDate()).padStart(2, "0")}:${String(
    checkOut.getMonth() + 1
  ).padStart(2, "0")}:${checkOut.getFullYear()}`;

  const now = new Date();
  const time = `${now.getHours()}:${String(now.getMinutes()).padStart(2, "0")}`;

  const price = room.price * parseInt(night);

  const booking = new Booking({
    userName,
    userId,
    date,
    time,
    beforeDate,
    classRoom,
    night,
    price,
    phoneNumber,
    fullName,
  });

  try {
    await booking.save();
    console.log("‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ.");
    await ctx.reply(
      "‚úÖ –ß–µ–∫–∞–π—Ç–µ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –°—Ç–∞—Ç—É—Å —Ç–∞ –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –±–æ—Ç."
    );
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –ë–î:", err);
    await ctx.reply(
      "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    );
    return ctx.scene.enter("checkDate");
  }

  return start(ctx); // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç
});

paid.hears("–ù–∞–∑–∞–¥", async (ctx) => {
  return ctx.scene.enter("checkData");
});

export {
  pickDate,
  checkDate,
  messenger,
  backOrQuantityNight,
  howManyNight,
  fullName,
  phone,
  checkData,
  details,
  paid,
};
